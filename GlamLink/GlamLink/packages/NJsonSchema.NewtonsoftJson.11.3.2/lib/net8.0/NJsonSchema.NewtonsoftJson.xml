<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NJsonSchema.NewtonsoftJson</name>
    </assembly>
    <members>
        <member name="T:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter">
            <summary>A converter to correctly serialize exception objects.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter"/> class.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter.#ctor(System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Reflection.Assembly})">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter" /> class.</summary>
            <param name="hideStackTrace">If set to <c>true</c> the serializer hides stack trace (i.e. sets the StackTrace to 'HIDDEN').</param>
            <param name="searchedNamespaces">The namespaces to search for exception types.</param>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter.CanWrite">
            <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Writes the JSON representation of the object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter.CanConvert(System.Type)">
            <summary>Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonExceptionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceAttribute">
            <summary>Defines a child class in the inheritance chain.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceAttribute.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceAttribute"/> class.</summary>
            <param name="key">The discriminator key.</param>
            <param name="type">The child class type.</param>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceAttribute.Key">
            <summary>Gets the discriminator key.</summary>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceAttribute.Type">
            <summary>Gets the child class type.</summary>
        </member>
        <member name="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter">
            <summary>Defines the class as inheritance base class and adds a discriminator property to the serialized object.</summary>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.DefaultDiscriminatorName">
            <summary>Gets the default discriminiator name.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter"/> class.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter"/> class.</summary>
            <param name="discriminator">The discriminator.</param>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter"/> class.</summary>
            <param name="discriminator">The discriminator.</param>
            <param name="readTypeProperty">Read the $type property to determine the type 
            (fallback, should not be used as it might lead to security problems).</param>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter"/> class which only applies for the given base type.</summary>
            <remarks>Use this constructor for global registered converters (not defined on class).</remarks>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter"/> class which only applies for the given base type.</summary>
            <remarks>Use this constructor for global registered converters (not defined on class).</remarks>
            <param name="baseType">The base type.</param>
            <param name="discriminator">The discriminator.</param>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.DiscriminatorName">
            <summary>Gets the discriminator property name.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Writes the JSON representation of the object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.CanWrite">
            <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.</summary>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.CanRead">
            <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.CanConvert(System.Type)">
            <summary>Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.GetDiscriminatorValue(System.Type)">
            <summary>Gets the discriminator value for the given type.</summary>
            <param name="type">The object type.</param>
            <returns>The discriminator value.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonInheritanceConverter.GetDiscriminatorType(Newtonsoft.Json.Linq.JObject,System.Type,System.String)">
            <summary>Gets the type for the given discriminator value.</summary>
            <param name="jObject">The JSON object.</param>
            <param name="objectType">The object (base) type.</param>
            <param name="discriminatorValue">The discriminator value.</param>
            <returns></returns>
        </member>
        <member name="T:NJsonSchema.NewtonsoftJson.Converters.JsonReferenceConverter">
            <summary>Regenerates reference paths and correctly generates $ref properties.</summary>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Converters.JsonReferenceConverter.CanWrite">
            <summary>Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.</summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonReferenceConverter.CanConvert(System.Type)">
            <summary>Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonReferenceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Converters.JsonReferenceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Writes the JSON representation of the object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonReflectionService">
            <inheritdoc />
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonReflectionService.GetDescription(Namotion.Reflection.ContextualType,NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings,System.Type,System.Boolean,NJsonSchema.Generation.ReferenceTypeNullHandling)">
            <inheritdoc />
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonReflectionService.IsNullable(Namotion.Reflection.ContextualType,NJsonSchema.Generation.ReferenceTypeNullHandling)">
            <inheritdoc />
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonReflectionService.IsStringEnum(Namotion.Reflection.ContextualType,NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings)">
            <inheritdoc />
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonReflectionService.GetEnumValueConverter(NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings)">
            <inheritdoc />
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonReflectionService.GenerateProperties(NJsonSchema.JsonSchema,Namotion.Reflection.ContextualType,NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings,NJsonSchema.Generation.JsonSchemaGenerator,NJsonSchema.Generation.JsonSchemaResolver)">
            <inheritdoc />
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonReflectionService.GetPropertyName(Namotion.Reflection.ContextualAccessorInfo,NJsonSchema.Generation.JsonSchemaGeneratorSettings)">
            <inheritdoc />
        </member>
        <member name="T:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGenerator">
            <summary>
            Provides method to generate JSON Schemas with the Newtonsoft.Json schema generator.
            </summary>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGenerator.FromType``1">
            <summary>Creates a <see cref="T:NJsonSchema.JsonSchema" /> from a given type.</summary>
            <typeparam name="TType">The type to create the schema for.</typeparam>
            <returns>The <see cref="T:NJsonSchema.JsonSchema" />.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGenerator.FromType(System.Type)">
            <summary>Creates a <see cref="T:NJsonSchema.JsonSchema" /> from a given type.</summary>
            <param name="type">The type to create the schema for.</param>
            <returns>The <see cref="T:NJsonSchema.JsonSchema" />.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGenerator.FromType``1(NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings)">
            <summary>Creates a <see cref="T:NJsonSchema.JsonSchema" /> from a given type.</summary>
            <typeparam name="TType">The type to create the schema for.</typeparam>
            <param name="settings">The settings.</param>
            <returns>The <see cref="T:NJsonSchema.JsonSchema" />.</returns>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGenerator.FromType(System.Type,NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings)">
            <summary>Creates a <see cref="T:NJsonSchema.JsonSchema" /> from a given type.</summary>
            <param name="type">The type to create the schema for.</param>
            <param name="settings">The settings.</param>
            <returns>The <see cref="T:NJsonSchema.JsonSchema" />.</returns>
        </member>
        <member name="T:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings">
            <inheritdoc />
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.Generation.JsonSchemaGeneratorSettings"/> class.</summary>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings.SerializerSettings">
            <summary>Gets or sets the Newtonsoft JSON serializer settings.</summary>
        </member>
        <member name="P:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings.ActualContractResolver">
            <summary>Gets the contract resolver.</summary>
            <returns>The contract resolver.</returns>
            <exception cref="T:System.InvalidOperationException">A setting is misconfigured.</exception>
        </member>
        <member name="M:NJsonSchema.NewtonsoftJson.Generation.NewtonsoftJsonSchemaGeneratorSettings.ResolveContract(System.Type)">
            <summary>Gets the contract for the given type.</summary>
            <param name="type">The type.</param>
            <returns>The contract.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
    </members>
</doc>
